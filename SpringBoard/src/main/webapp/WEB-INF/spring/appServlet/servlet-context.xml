<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 이 부분이 있어야 controller의 특별한 기능인 서블릿으로부터 주소값 매핑 역할을 가능하게 해준다. RequestMapping을 사용할 수 있게 한다 . 즉, 무조건 있어야 한다!! -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- 어노테이션 검색 -->
	<context:component-scan base-package="com.koreait.sboard" />
	
	<!-- webapp 아래에 resources안에 있는 파일들을 매핑한다. -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/res/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>	<!-- 기존 ViewResolver의 우선순위(= 화면 구성)를 2번으로 지정. -->
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<beans:property name="order" value="1"/>	<!-- Tiles3의 우선 순위(= 화면 구성)를 1번으로 지정(즉, tiles3를 가장 우선적으로 로드시킨다는 말.) -->
	</beans:bean>
	
	<!-- 2021.01.25 : Tiles3  설정 추가 -->
	<!-- Tiles 설정 파일 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
		<!--  tiles3 동적 메뉴 구성을 위한 설정(= 화면이 이동할 때 마다 실행되게 하는 설정) -->
		<beans:property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory"/>
	</beans:bean>
	
	<!-- 2021.01.22 : HikariCP 설정 -->
	<!-- hikariConfig는 valueObject 역할을 한다. -->
	<beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<beans:property name="jdbcUrl" value="jdbc:mysql://localhost:3307/board3?serverTimezone=UTC"/>
		<beans:property name="username" value="root"/>
		<beans:property name="password" value="koreait2020"/>
	</beans:bean>
	
	<!-- HikariDataSource 객체가 삭제되기 전에 연결을 해제하고자 close() 메서드를 destroy-method 속성으로 지정 -->
	<beans:bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<beans:constructor-arg ref="hikariConfig" />	<!-- dataSource 객체에 hikariConfig 객체 의존성 주입, 스프링에서는 id값이 ref에 들어가야 한다. -->
	</beans:bean>
	
	<!-- 2021.01.22 : mybatis 핵심 객체 sqlSessionFactory bean 등록 설정 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="typeAliasesPackage" value="com.koreait.sboard"/>	<!-- @Alias를 안 쓰기 위해서 적었다. -->
	</beans:bean>
	
	<!-- 위에 네임스페이스 부분에 등록되어 있어야한다. java에선 import -->
	<mybatis-spring:scan base-package="com.koreait.sboard"/>
	
	<beans:bean class="com.koreait.sboard.common.MailUtils">
		<beans:property name="userId" value="chs02305"/>
		<beans:property name="userPw" value="navzhfldk12#$"/>
		<beans:property name="host" value="smtp.naver.com"/>
		<beans:property name="port" value="587"/>
		<beans:property name="fromEmail" value="chs02305@naver.com"/>
	</beans:bean>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>
	</beans:bean>
	
</beans:beans>
